*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*=
*=  Installing, Building, and Using wxAutoExcel
*=
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*

*********************
Table of Contents
*********************
 1 Installation
 2 Building wxAutoExcel
   2.1 General notes   
   2.2 Building with CMake   
   2.3 Building with other compilers/IDEs
   2.4 Verifying the build
 3 Building applications using wxAutoExcel


1 Installation
========================
The first step, is to download the source archive or clone the code
from GitHub and put it in any directory. If at all possible, please
avoid a directory name with spaces in its name, as this can cause problems.
In the following text this directory will be referred to as WXAUTOEXCELDIR.


2 Building wxAutoExcel
========================

2.1 General notes
----------------------------------------------------------------
wxAutoExcel supports building with CMake, using FindwxWidgets CMake
module to find wxWidgets installation to use.

Before building wxAutoExcel, you can change some of its compile-time
settings in WXAUTOEXCELDIR\include\wx\wxAutoExcel_setup.h. These settings
are mostly useful if you don't plan to use some of wxAutoExcel features
such as Shapes or Charts and wish to minimize the size of the wxAutoExcel
(dynamic) library.


2.2 Building with CMake
----------------------------------------------------------------
CMake 3.14 or newer is required. As usual, an out-of-source build is strongly
recommended. wxAutoExcel can be built with Microsoft Visual C++ or MinGW
(GCC or clang) in Debug and/or Release configurations.

Build options:
  wxAutoExcel_BUILD_SHARED: whether to build static (lib) or shared (dll) wxAutoExcel library.
    BOOL, defaults to the value of BUILD_SHARED_LIBS.
  wxAutoExcel_BUILD_LINK_WX_SHARED: whether to link to wxWidgets dynamically. When linking
    dynamically, the wxWidgets_LIB_DIR CMake variable should be set to wxWidgets dll
    folder and not the lib folder.
    BOOL, defaults to the value of BUILD_SHARED_LIBS.
  wxAutoExcel_BUILD_USE_STATIC_RUNTIME: whether to link to the static CRT (and other compiler
     runtime libraries). This setting must match the setting used when building wxWidgets
     (wxBUILD_USE_STATIC_RUNTIME, RUNTIME_LIBS etc.) and cannot be used when building wxAutoExcel
     in the shared mode or linking to wxWidgets dynamically.
     BOOL, defaults to OFF.
  wxAutoExcel_BUILD_USE_PRECOMPILED: whether to use precompiled headers (requires CMake v3.16+).
     BOOL, defaults to ON
  wxAutoExcel_BUILD_VENDOR: Short string identifying the library builder (used in DLL name).
     STRING, defaults to "custom".
  wxAutoExcel_BUILD_INSTALL: whether to install wxAutoExcel to CMAKE_INSTALL_PREFIX.
     BOOL, defaults to OFF.
  wxAutoExcel_BUILD_BUILD_SAMPLES: whether to build the included samples.
     BOOL, defaults to the value of PROJECT_IS_TOP_LEVEL.

Static or import libraries will be built in the WXAUTOEXCEL-BULIDDIR/lib
folder. Dynamic libraries and samples' executables will be built in the
WXAUTOEXCEL-BULIDDIR/bin folder. When using a multi-config generator, the bin
folder contains subfolders for the individual configurations (e.g., Debug).
The same hierarchy is followed for the folder with installed wxAutoExcel
(WXAUTOEXCEL-INSTALLDIR) but subfolders for configurations are not used.

Library naming scheme
The names of static and import libraries include version and indication whether
this is a Debug configuration (those have "d" after the version number).
The names of shared (DLL) libraries include more detailed version and provide also
compiler, architecture, and Vendor identification. For example this is how the file
names will look for Debug configuration of version 2.0.0 with Vendor set to default
"custom".
For MSVC 2022 x64
    Import library: wxAutoExcel20d.lib
    DLL: wxAutoExcel200d_vc143_x64_custom.dll
For GCC 13.2.0 x86
    Import library: libwxAutoExcel20d.a
    DLL: wxAutoExcel200d_gcc1320_x32_custom.dll
For clang 15.0.0 x64
    Import library: libwxAutoExcel20d.a
    DLL: wxAutoExcel200d_clang1500_x64_custom.dll


2.3 Building with other tools
----------------------------------------------------------------
Create a new project just like you would for any other custom library
using wxWidgets. Add the desired build targets (Debug/Release, DLL Debug/DLL 
Release for Win32 and/or x64 ...). When building a shared build, WXMAKINGDLL_WXAUTOEXCEL
must be defined.

The dynamic builds of wxAutoExcel need to link with wxWidgets's base
(e.g., wxbase32u) and MSW core (e.g., wxmsw32u_core) libraries.
In the static builds, standard Windows libraries required by wxWidgets are needed as well.

2.4 Verifying the build
----------------------------------------------------------------
After successfully building wxAutoExcel library, build and run the Minimal sample
to verify that your build works properly.


3 Building applications using wxAutoExcel
=====================================

The make/project files generated by CMake show which flags 
should be used when building applications using wxAutoExcel.

If you are using CMake for your project MyProject, you can do something like this
  target_link_libraries(MyProject PRIVATE wxAutoExcel ${wxWidgets_LIBRARIES})

Independently of the compiler and IDE you are using you need to do the
following to use wxAutoExcel. In addition to the standard wxWidgets-related
and other settings, you need to: 
* Add WXAUTOEXCELDIR/include or WXAUTOEXCEL-INSTALLDIR/include to the compiler include path.
* Add WXAUTOEXCEL-BUILDDIR/lib/[config] or WXAUTOEXCEL-INSTALLDIR/lib to the libraries path.
* If you are using the DLL build of wxAutoExcel, add "WXUSINGDLL_WXAUTOEXCEL"
  to the preprocessor definitions.
* Finally, add the wxAutoExcel library (see the Library Naming Scheme chapter)
  to the list of libraries to link with.